<roblox version="4">
  <Item class="ModuleScript" referent="0">
    <Properties>
      <string name="Name">RPL</string>
      <string name="Source">local HttpService = game:GetService("HttpService")
local connection = require(script:WaitForChild("Connection"));

return function(url, password)
	local connectionRequest = HttpService:RequestAsync({
		Url = url.."/connection",
		Method = "POST",
		Headers = {
			["Content-Type"] = "Application/JSON",
		},
		Body = HttpService:JSONEncode({
			password = password
		})
	})
	local response = HttpService:JSONDecode(connectionRequest.Body);

	if response.success == true then
		return connection.__new(url, response.socketId);
	else
		print(connectionRequest.Body)
		error("Connection failed")
	end
end</string>
    </Properties>
    <Item class="ModuleScript" referent="1">
      <Properties>
        <string name="Name">base</string>
        <string name="Source"><![CDATA[--Credit to Reselim https://gist.github.com/Reselim/40d62b17d138cc74335a1b0709e19ce2
local FILLER_CHARACTER = 61

local alphabet = {}
local indexes = {}

for index = 65, 90 do table.insert(alphabet, index) end -- A-Z
for index = 97, 122 do table.insert(alphabet, index) end -- a-z
for index = 48, 57 do table.insert(alphabet, index) end -- 0-9

table.insert(alphabet, 43) -- +
table.insert(alphabet, 47) -- /

for index, character in pairs(alphabet) do
	indexes[character] = index
end

local function buildString(values)
	local output = {}

	for index = 1, #values, 4096 do
		table.insert(output, string.char(
			unpack(values, index, math.min(index + 4096 - 1, #values))
			))
	end

	return table.concat(output, "")
end

local Base64 = {}

function Base64.encode(input)
	local output = {}

	for index = 1, #input, 3 do
		local C1, C2, C3 = string.byte(input, index, index + 2)

		local A = bit32.rshift(C1, 2)
		local B = bit32.lshift(bit32.band(C1, 3), 4) + bit32.rshift(C2 or 0, 4)
		local C = bit32.lshift(bit32.band(C2 or 0, 15), 2) + bit32.rshift(C3 or 0, 6)
		local D = bit32.band(C3 or 0, 63)

		output[#output + 1] = alphabet[A + 1]
		output[#output + 1] = alphabet[B + 1]
		output[#output + 1] = C2 and alphabet[C + 1] or FILLER_CHARACTER
		output[#output + 1] = C3 and alphabet[D + 1] or FILLER_CHARACTER
	end

	return buildString(output)
end

function Base64.decode(input)
	local output = {}

	for index = 1, #input, 4 do
		local C1, C2, C3, C4 = string.byte(input, index, index + 3)

		local I1 = indexes[C1] - 1
		local I2 = indexes[C2] - 1
		local I3 = (indexes[C3] or 1) - 1
		local I4 = (indexes[C4] or 1) - 1

		local A = bit32.lshift(I1, 2) + bit32.rshift(I2, 4)
		local B = bit32.lshift(bit32.band(I2, 15), 4) + bit32.rshift(I3, 2)
		local C = bit32.lshift(bit32.band(I3, 3), 6) + I4

		output[#output + 1] = A
		if C3 ~= FILLER_CHARACTER then output[#output + 1] = B end
		if C4 ~= FILLER_CHARACTER then output[#output + 1] = C end
	end

	return buildString(output)
end

return Base64
]]></string>
      </Properties>
    </Item>
    <Item class="ModuleScript" referent="2">
      <Properties>
        <string name="Name">connection</string>
        <string name="Source"><![CDATA[local HttpService = game:GetService("HttpService")
local Base64 = require(script:WaitForChild("Base"))
Connection = {}
Connection.__index = Connection

function Connection.__new(url, id)
	local newConnection = {}
	setmetatable(newConnection, Connection)

	newConnection.url = url;
	newConnection.id = id;
	
	newConnection.handlers = {};

	spawn(function()
		while wait() do
			local success,response = pcall(function()
				local getData = HttpService:RequestAsync({
					Url = url.."/poll/"..id,
					Method = "GET",
				})
				local response = HttpService:JSONDecode(getData.Body);
				if response.success == true then
					newConnection.handlers[response.event.name](response.event.data)
				end
			end)
		end
	end)
	spawn(function()
		while wait(5) do
			local success,response = pcall(function()
				HttpService:RequestAsync({
					Url = newConnection.url.."/poll/"..newConnection.id,
					Method = "POST",
					Headers = {
						["Content-Type"] = "Application/JSON"
					},
					Body = HttpService:JSONEncode({
						name = Base64.encode("internal_ping"),
						data = Base64.encode("Internal Ping. Service is up.")
					})
				})
			end)
		end
	end)
	
	local function close()
		HttpService:RequestAsync({
			Url = newConnection.url.."/connection/"..newConnection.id,
			Method = "DELETE",
		})
	end
	
	game:BindToClose(close);
	game.Close:Connect(close)

	return newConnection
end

function Connection:send(name, data)
	HttpService:RequestAsync({
		Url = self.url.."/poll/"..self.id,
		Method = "POST",
		Headers = {
			["Content-Type"] = "Application/JSON"
		},
		Body = HttpService:JSONEncode({
			name = Base64.encode(name),
				data = Base64.encode(data)
		})
	})
end

function Connection:on(event, handler)
	self.handlers[event] = handler;
end

function Connection:disconnect()
	HttpService:RequestAsync({
		Url = self.url.."/connection/"..self.id,
		Method = "DELETE",
	})
end

return Connection
]]></string>
      </Properties>
    </Item>
  </Item>
</roblox>